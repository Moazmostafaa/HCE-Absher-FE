// <auto-generated />
using System;
using HCE.Persistence.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HCE.Persistence.Migrations
{
    [DbContext(typeof(HCEDbContext))]
    [Migration("20220403224550_RefactorEntities")]
    partial class RefactorEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EntityFrameworkCore.MemoryJoin.QueryModelClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Date1")
                        .HasColumnType("datetime2")
                        .HasColumnName("date1");

                    b.Property<DateTime?>("Date2")
                        .HasColumnType("datetime2")
                        .HasColumnName("date2");

                    b.Property<DateTime?>("Date3")
                        .HasColumnType("datetime2")
                        .HasColumnName("date3");

                    b.Property<double?>("Double1")
                        .HasColumnType("float")
                        .HasColumnName("double1");

                    b.Property<double?>("Double2")
                        .HasColumnType("float")
                        .HasColumnName("double2");

                    b.Property<double?>("Double3")
                        .HasColumnType("float")
                        .HasColumnName("double3");

                    b.Property<Guid?>("Guid1")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid1");

                    b.Property<Guid?>("Guid2")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid2");

                    b.Property<Guid?>("Guid3")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid3");

                    b.Property<long?>("Long1")
                        .HasColumnType("bigint")
                        .HasColumnName("long1");

                    b.Property<long?>("Long2")
                        .HasColumnType("bigint")
                        .HasColumnName("long2");

                    b.Property<long?>("Long3")
                        .HasColumnType("bigint")
                        .HasColumnName("long3");

                    b.Property<string>("String1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("string1");

                    b.Property<string>("String2")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("string2");

                    b.Property<string>("String3")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("string3");

                    b.HasKey("Id");

                    b.ToTable("__stub_query_data", "__stub");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Audit.AuditChangedData", b =>
                {
                    b.Property<Guid>("AuditDataChangesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChangeType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChangedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdentifierSaveChangesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SchemaName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AuditDataChangesId");

                    b.HasIndex("ChangeType")
                        .HasDatabaseName("IX_AuditDataChangeType");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_CreatedBy");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_CreationDate");

                    b.HasIndex("PrimaryKey")
                        .HasDatabaseName("IX_PrimaryKey");

                    b.HasIndex("SchemaName")
                        .HasDatabaseName("IX_SchemaName");

                    b.HasIndex("TableName")
                        .HasDatabaseName("IX_TableName");

                    b.ToTable("AuditChangedData", "Audit");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Audit.AuditUserAction", b =>
                {
                    b.Property<long>("AuditUserActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AuditUserActionId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AuditUserActionId");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_CreatedBy");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_CreationDate");

                    b.ToTable("AuditUserAction", "Audit");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Customers.CRMComplain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssignedGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPricePlan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerProfile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MSISDN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResolutionDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResolvedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketCreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("CRMComplain", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Customers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("Customer", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Customers.MsOriginating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CallingPartyNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateForStartOfCharge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EosInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstAssignedSpeechCoderVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstCallingLocationInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalCauseAndLoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TimeForStartOfCharge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeForStopOfCharge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("MsOriginating", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.General.Attachment", b =>
                {
                    b.Property<Guid>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extention")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<long>("SizeByByte")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AttachmentId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ModuleId");

                    b.ToTable("Attachment", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.Modules", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModuleCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModuleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ModuleId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Modules", "Identity");

                    b.HasData(
                        new
                        {
                            ModuleId = 1,
                            CreatedBy = "2a4e1c24-aff9-41c2-b046-0f25613a3c1f",
                            CreatedDate = new DateTime(2021, 11, 9, 0, 43, 49, 480, DateTimeKind.Local),
                            IsDeleted = false,
                            ModuleCode = "Post",
                            ModuleName = "Post"
                        });
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.Otp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("OtpId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TcnCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tries")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NationalId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("NationalId"), false);

                    b.ToTable("Otp", "Identity");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Role", "Identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bceb091d-6b80-4f37-ae10-8388a4172e8d"),
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 10, 27, 0, 43, 49, 480, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "SuperAdmin",
                            RoleId = new Guid("bceb091d-6b80-4f37-ae10-8388a4172e8d")
                        });
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.RoleModules", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleModulesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ModuleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleModules", "Identity");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BlockLawId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BlockPeriod")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<Guid?>("IdentificationAttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProfileAttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdentificationAttachmentId")
                        .IsUnique()
                        .HasFilter("[IdentificationAttachmentId] IS NOT NULL");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NationalId")
                        .IsUnique()
                        .HasFilter("[NationalId] IS NOT NULL");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("NationalId"), false);

                    b.HasIndex("ProfileAttachmentId")
                        .IsUnique()
                        .HasFilter("[ProfileAttachmentId] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("UserName"), false);

                    b.ToTable("User", "Identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a4e1c24-aff9-41c2-b046-0f25613a3c1f"),
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 10, 27, 0, 43, 49, 480, DateTimeKind.Local),
                            Email = "Super.admin@absher.com",
                            Gender = 1,
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Super Admin",
                            Password = "98ca5703dbd694f23e853efb870c6919c5947f1c8add29c96a11bf3c13a89c07",
                            UserId = new Guid("2a4e1c24-aff9-41c2-b046-0f25613a3c1f"),
                            UserName = "super.admin"
                        });
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", "Identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d867ac37-6e53-4880-89b6-fb867eb13c89"),
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 10, 27, 0, 43, 49, 480, DateTimeKind.Local),
                            IsDeleted = false,
                            RoleId = new Guid("bceb091d-6b80-4f37-ae10-8388a4172e8d"),
                            UserId = new Guid("2a4e1c24-aff9-41c2-b046-0f25613a3c1f"),
                            UserRoleId = new Guid("d867ac37-6e53-4880-89b6-fb867eb13c89")
                        });
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.UserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserTokenId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserToken", "Identity");
                });

            modelBuilder.Entity("HCE.Domain.Entities.KPIs.Kpi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BadThreshold")
                        .HasColumnType("int");

                    b.Property<int>("CalculatedWeight")
                        .HasColumnType("int");

                    b.Property<Guid>("CodecId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DefaultWeight")
                        .HasColumnType("int");

                    b.Property<string>("DefinitionFormula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DomainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenericFormula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoalOptimization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GoodThreshold")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExperienceCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNps")
                        .HasColumnType("bit");

                    b.Property<Guid>("MeasuringUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubSystemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Target")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VendorFormula")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("Kpi", "KPIs");
                });

            modelBuilder.Entity("HCE.Domain.Entities.KPIs.KpiCategories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("KpiId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("KpiId");

                    b.HasIndex("UserId");

                    b.ToTable("KpiCategories", "KPIs");
                });

            modelBuilder.Entity("HCE.Domain.Entities.KPIs.KpiWeight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("KpiId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WeightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("WeightValue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("KpiId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.HasIndex("WeightId");

                    b.ToTable("KpiWeight", "KPIs");
                });

            modelBuilder.Entity("HCE.Domain.Entities.KPIs.ServiceWeights", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WeightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("WeightValue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.HasIndex("WeightId");

                    b.ToTable("ServiceWeights", "KPIs");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.AccessTechnology", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ServiceDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("AccessTechnology", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("Category", "KPIs");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Cell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccessTechnologyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CellDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GoalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccessTechnologyId");

                    b.HasIndex("GoalId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("SiteId");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorId");

                    b.ToTable("Cell", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityKml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityNameLang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTop")
                        .HasColumnType("bit");

                    b.Property<Guid>("StateRegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("StateRegionId");

                    b.HasIndex("UserId");

                    b.ToTable("City", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Cluster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClusterDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClusterKml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClusterNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClusterNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClusterNameLang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("Cluster", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Codec", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CodecDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodecName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("Codec", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.CoreType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NPSKPIWeightDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NPSKPIWeightName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("CoreType", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryKml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryNameLang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WordRegionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.HasIndex("WordRegionId");

                    b.ToTable("Country", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.DataSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataSourceDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataSourceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("DataSource", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.DieselGenerator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CapacityUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("DieselGeneratorCapacity")
                        .HasColumnType("float");

                    b.Property<string>("DieselGeneratorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DieselGeneratorTankCapacity")
                        .HasColumnType("float");

                    b.Property<string>("DieselGeneratorType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TankCapacityUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CapacityUnitId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("SiteId");

                    b.HasIndex("TankCapacityUnitId");

                    b.HasIndex("UserId");

                    b.ToTable("DieselGenerator", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DistrictDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DistrictKml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DistrictNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DistrictNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DistrictNameLang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("District", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Domains", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DomainDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DomainName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("Domains", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.ExternalBaseStation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalBaseStationBTSType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalBaseStationDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalBaseStationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExternalBaseStationRFSDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("SiteId");

                    b.HasIndex("UserId");

                    b.ToTable("ExternalBaseStation", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.ExternalOperator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalOperatorDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalOperatorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("ExternalOperator", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Goal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GoalDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("Goal", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.KPIFeedingLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CellId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DataSourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("KPIFeedingLogDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("KPIId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DataSourceId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("KPIId");

                    b.HasIndex("UserId");

                    b.ToTable("KPIFeedingLog", "KPIs");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.MeasuringUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MeasuringUnitDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeasuringUnitName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("MeasuringUnit", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Operator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("OperatorDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OperatorGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OperatorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OperatorGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Operator", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.OperatorGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("OperatorGroupDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatorGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("OperatorGroup", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Priority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PriorityDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriorityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("Priority", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ParentServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ParentServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Service", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Site", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClusterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("SiteDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("Site", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.StateRegion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("StateRegionDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateRegionKml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateRegionNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateRegionNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateRegionNameLang")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("StateRegion", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.SubSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SubSystemDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubSystemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("SubSystem", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Vendor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VendorDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("Vendor", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Weight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("OperatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WeightDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeightName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OperatorId");

                    b.HasIndex("UserId");

                    b.ToTable("Weight", "KPIs");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.WorldRegion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WorldRegionDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorldRegionNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorldRegionNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorldRegionNameLang")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("WorldRegion", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Customers.Customer", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.General.Attachment", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Identity.Modules", "Module")
                        .WithMany("Attachment")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.RoleModules", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Identity.Modules", "Module")
                        .WithMany("RoleModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Identity.Role", "Role")
                        .WithMany("RoleModules")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.User", b =>
                {
                    b.HasOne("HCE.Domain.Entities.General.Attachment", "IdentificationAttachment")
                        .WithOne("UserIdentification")
                        .HasForeignKey("HCE.Domain.Entities.Identity.User", "IdentificationAttachmentId");

                    b.HasOne("HCE.Domain.Entities.General.Attachment", "ProfileAttachment")
                        .WithOne("UserProfile")
                        .HasForeignKey("HCE.Domain.Entities.Identity.User", "ProfileAttachmentId");

                    b.Navigation("IdentificationAttachment");

                    b.Navigation("ProfileAttachment");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.UserRole", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.UserToken", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithOne("UserToken")
                        .HasForeignKey("HCE.Domain.Entities.Identity.UserToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.KPIs.Kpi", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Lookup.Codec", "Codec")
                        .WithMany("KPI")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Lookup.Domains", "Domain")
                        .WithMany("KPI")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Lookup.MeasuringUnit", "MeasuringUnit")
                        .WithMany("KPI")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Lookup.Priority", "Priority")
                        .WithMany("KPI")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Lookup.Service", "Service")
                        .WithMany("Kpis")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Lookup.SubSystem", "SubSystem")
                        .WithMany("KPI")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Codec");

                    b.Navigation("Domain");

                    b.Navigation("MeasuringUnit");

                    b.Navigation("Priority");

                    b.Navigation("Service");

                    b.Navigation("SubSystem");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.KPIs.KpiCategories", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Lookup.Category", "Category")
                        .WithMany("KpiCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.KPIs.Kpi", "Kpi")
                        .WithMany("KpiCategories")
                        .HasForeignKey("KpiId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Kpi");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.KPIs.KpiWeight", b =>
                {
                    b.HasOne("HCE.Domain.Entities.KPIs.Kpi", "Kpi")
                        .WithMany("KpiWeights")
                        .HasForeignKey("KpiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Lookup.Service", "Service")
                        .WithMany("KpiWeights")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Lookup.Weight", "Weight")
                        .WithMany("KpiWeights")
                        .HasForeignKey("WeightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kpi");

                    b.Navigation("Service");

                    b.Navigation("User");

                    b.Navigation("Weight");
                });

            modelBuilder.Entity("HCE.Domain.Entities.KPIs.ServiceWeights", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Lookup.Service", "Service")
                        .WithMany("ServiceWeights")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Lookup.Weight", "Weight")
                        .WithMany("ServiceWeights")
                        .HasForeignKey("WeightId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("User");

                    b.Navigation("Weight");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.AccessTechnology", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Category", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Cell", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Lookup.AccessTechnology", "AccessTechnology")
                        .WithMany("Cells")
                        .HasForeignKey("AccessTechnologyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Lookup.Goal", "Goal")
                        .WithMany("Cells")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Lookup.Site", "Site")
                        .WithMany("Cells")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Lookup.Vendor", "Vendor")
                        .WithMany("Cells")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AccessTechnology");

                    b.Navigation("Goal");

                    b.Navigation("Site");

                    b.Navigation("User");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.City", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Lookup.StateRegion", "StateRegion")
                        .WithMany("Cities")
                        .HasForeignKey("StateRegionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StateRegion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Cluster", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Lookup.District", "District")
                        .WithMany("Clusters")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("District");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Codec", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.CoreType", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Country", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Lookup.WorldRegion", "WorldRegion")
                        .WithMany("Countries")
                        .HasForeignKey("WordRegionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorldRegion");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.DataSource", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.DieselGenerator", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Lookup.MeasuringUnit", "MeasuringUnitCapacity")
                        .WithMany("DieselGeneratorCapacities")
                        .HasForeignKey("CapacityUnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Lookup.Site", "Site")
                        .WithMany("DieselGenerators")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Lookup.MeasuringUnit", "MeasuringUnitTankCapacity")
                        .WithMany("DieselGeneratorTankCapacities")
                        .HasForeignKey("TankCapacityUnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MeasuringUnitCapacity");

                    b.Navigation("MeasuringUnitTankCapacity");

                    b.Navigation("Site");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.District", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Lookup.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Domains", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.ExternalBaseStation", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Lookup.Site", "Site")
                        .WithMany("ExternalBaseStations")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Site");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.ExternalOperator", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Goal", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.KPIFeedingLog", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Lookup.DataSource", "DataSource")
                        .WithMany("KPIFeedingLogs")
                        .HasForeignKey("DataSourceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.KPIs.Kpi", "KPI")
                        .WithMany()
                        .HasForeignKey("KPIId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Customers.Customer", "Customer")
                        .WithMany("KPIFeedingLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Lookup.Cell", "Cell")
                        .WithMany("KPIFeedingLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cell");

                    b.Navigation("Customer");

                    b.Navigation("DataSource");

                    b.Navigation("KPI");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.MeasuringUnit", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Operator", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Lookup.Country", "Country")
                        .WithMany("Operator")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Lookup.OperatorGroup", "OperatorGroup")
                        .WithMany("Operators")
                        .HasForeignKey("OperatorGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("OperatorGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.OperatorGroup", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Priority", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Service", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Lookup.Service", "ParentService")
                        .WithMany()
                        .HasForeignKey("ParentServiceId");

                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ParentService");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Site", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Lookup.Cluster", "Cluster")
                        .WithMany("Sites")
                        .HasForeignKey("ClusterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cluster");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.StateRegion", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Lookup.Country", "Country")
                        .WithMany("StateRegions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.SubSystem", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Vendor", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Weight", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Lookup.Country", null)
                        .WithMany("Weights")
                        .HasForeignKey("CountryId");

                    b.HasOne("HCE.Domain.Entities.Lookup.Operator", "Operator")
                        .WithMany("Weights")
                        .HasForeignKey("OperatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Operator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.WorldRegion", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Customers.Customer", b =>
                {
                    b.Navigation("KPIFeedingLogs");
                });

            modelBuilder.Entity("HCE.Domain.Entities.General.Attachment", b =>
                {
                    b.Navigation("UserIdentification");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.Modules", b =>
                {
                    b.Navigation("Attachment");

                    b.Navigation("RoleModules");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.Role", b =>
                {
                    b.Navigation("RoleModules");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.User", b =>
                {
                    b.Navigation("UserRoles");

                    b.Navigation("UserToken");
                });

            modelBuilder.Entity("HCE.Domain.Entities.KPIs.Kpi", b =>
                {
                    b.Navigation("KpiCategories");

                    b.Navigation("KpiWeights");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.AccessTechnology", b =>
                {
                    b.Navigation("Cells");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Category", b =>
                {
                    b.Navigation("KpiCategories");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Cell", b =>
                {
                    b.Navigation("KPIFeedingLogs");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.City", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Cluster", b =>
                {
                    b.Navigation("Sites");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Codec", b =>
                {
                    b.Navigation("KPI");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Country", b =>
                {
                    b.Navigation("Operator");

                    b.Navigation("StateRegions");

                    b.Navigation("Weights");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.DataSource", b =>
                {
                    b.Navigation("KPIFeedingLogs");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.District", b =>
                {
                    b.Navigation("Clusters");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Domains", b =>
                {
                    b.Navigation("KPI");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Goal", b =>
                {
                    b.Navigation("Cells");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.MeasuringUnit", b =>
                {
                    b.Navigation("DieselGeneratorCapacities");

                    b.Navigation("DieselGeneratorTankCapacities");

                    b.Navigation("KPI");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Operator", b =>
                {
                    b.Navigation("Weights");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.OperatorGroup", b =>
                {
                    b.Navigation("Operators");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Priority", b =>
                {
                    b.Navigation("KPI");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Service", b =>
                {
                    b.Navigation("KpiWeights");

                    b.Navigation("Kpis");

                    b.Navigation("ServiceWeights");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Site", b =>
                {
                    b.Navigation("Cells");

                    b.Navigation("DieselGenerators");

                    b.Navigation("ExternalBaseStations");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.StateRegion", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.SubSystem", b =>
                {
                    b.Navigation("KPI");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Vendor", b =>
                {
                    b.Navigation("Cells");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.Weight", b =>
                {
                    b.Navigation("KpiWeights");

                    b.Navigation("ServiceWeights");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Lookup.WorldRegion", b =>
                {
                    b.Navigation("Countries");
                });
#pragma warning restore 612, 618
        }
    }
}
