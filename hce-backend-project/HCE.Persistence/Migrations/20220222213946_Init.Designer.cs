// <auto-generated />
using System;
using HCE.Persistence.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HCE.Persistence.Migrations
{
    [DbContext(typeof(HCEDbContext))]
    [Migration("20220222213946_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EntityFrameworkCore.MemoryJoin.QueryModelClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Date1")
                        .HasColumnType("datetime2")
                        .HasColumnName("date1");

                    b.Property<DateTime?>("Date2")
                        .HasColumnType("datetime2")
                        .HasColumnName("date2");

                    b.Property<DateTime?>("Date3")
                        .HasColumnType("datetime2")
                        .HasColumnName("date3");

                    b.Property<double?>("Double1")
                        .HasColumnType("float")
                        .HasColumnName("double1");

                    b.Property<double?>("Double2")
                        .HasColumnType("float")
                        .HasColumnName("double2");

                    b.Property<double?>("Double3")
                        .HasColumnType("float")
                        .HasColumnName("double3");

                    b.Property<Guid?>("Guid1")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid1");

                    b.Property<Guid?>("Guid2")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid2");

                    b.Property<Guid?>("Guid3")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("guid3");

                    b.Property<long?>("Long1")
                        .HasColumnType("bigint")
                        .HasColumnName("long1");

                    b.Property<long?>("Long2")
                        .HasColumnType("bigint")
                        .HasColumnName("long2");

                    b.Property<long?>("Long3")
                        .HasColumnType("bigint")
                        .HasColumnName("long3");

                    b.Property<string>("String1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("string1");

                    b.Property<string>("String2")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("string2");

                    b.Property<string>("String3")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("string3");

                    b.HasKey("Id");

                    b.ToTable("__stub_query_data", "__stub");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Audit.AuditChangedData", b =>
                {
                    b.Property<Guid>("AuditDataChangesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChangeType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChangedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdentifierSaveChangesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SchemaName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AuditDataChangesId");

                    b.HasIndex("ChangeType")
                        .HasDatabaseName("IX_AuditDataChangeType");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_CreatedBy");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_CreationDate");

                    b.HasIndex("PrimaryKey")
                        .HasDatabaseName("IX_PrimaryKey");

                    b.HasIndex("SchemaName")
                        .HasDatabaseName("IX_SchemaName");

                    b.HasIndex("TableName")
                        .HasDatabaseName("IX_TableName");

                    b.ToTable("AuditChangedData", "Audit");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Audit.AuditUserAction", b =>
                {
                    b.Property<long>("AuditUserActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AuditUserActionId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AuditUserActionId");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_CreatedBy");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_CreationDate");

                    b.ToTable("AuditUserAction", "Audit");
                });

            modelBuilder.Entity("HCE.Domain.Entities.General.Attachment", b =>
                {
                    b.Property<Guid>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extention")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<long>("SizeByByte")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AttachmentId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ModuleId");

                    b.ToTable("Attachment", "General");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.Modules", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModuleCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModuleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ModuleId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Modules", "Identity");

                    b.HasData(
                        new
                        {
                            ModuleId = 1,
                            CreatedBy = "2a4e1c24-aff9-41c2-b046-0f25613a3c1f",
                            CreatedDate = new DateTime(2021, 11, 9, 0, 43, 49, 480, DateTimeKind.Local),
                            IsDeleted = false,
                            ModuleCode = "Post",
                            ModuleName = "Post"
                        });
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.Otp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("OtpId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TcnCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tries")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NationalId");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("NationalId"), false);

                    b.ToTable("Otp", "Identity");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Role", "Identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bceb091d-6b80-4f37-ae10-8388a4172e8d"),
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 10, 27, 0, 43, 49, 480, DateTimeKind.Local),
                            IsDeleted = false,
                            Name = "SuperAdmin",
                            RoleId = new Guid("bceb091d-6b80-4f37-ae10-8388a4172e8d")
                        });
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.RoleModules", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleModulesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ModuleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleModules", "Identity");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BlockLawId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BlockPeriod")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<Guid?>("IdentificationAttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProfileAttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdentificationAttachmentId")
                        .IsUnique()
                        .HasFilter("[IdentificationAttachmentId] IS NOT NULL");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NationalId")
                        .IsUnique()
                        .HasFilter("[NationalId] IS NOT NULL");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("NationalId"), false);

                    b.HasIndex("ProfileAttachmentId")
                        .IsUnique()
                        .HasFilter("[ProfileAttachmentId] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex("UserName"), false);

                    b.ToTable("User", "Identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a4e1c24-aff9-41c2-b046-0f25613a3c1f"),
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 10, 27, 0, 43, 49, 480, DateTimeKind.Local),
                            Email = "Super.admin@absher.com",
                            Gender = 1,
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Super Admin",
                            Password = "98ca5703dbd694f23e853efb870c6919c5947f1c8add29c96a11bf3c13a89c07",
                            UserId = new Guid("2a4e1c24-aff9-41c2-b046-0f25613a3c1f"),
                            UserName = "super.admin"
                        });
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", "Identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d867ac37-6e53-4880-89b6-fb867eb13c89"),
                            CreatedBy = "System",
                            CreatedDate = new DateTime(2021, 10, 27, 0, 43, 49, 480, DateTimeKind.Local),
                            IsDeleted = false,
                            RoleId = new Guid("bceb091d-6b80-4f37-ae10-8388a4172e8d"),
                            UserId = new Guid("2a4e1c24-aff9-41c2-b046-0f25613a3c1f"),
                            UserRoleId = new Guid("d867ac37-6e53-4880-89b6-fb867eb13c89")
                        });
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.UserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserTokenId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserToken", "Identity");
                });

            modelBuilder.Entity("HCE.Domain.Entities.General.Attachment", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Identity.Modules", "Module")
                        .WithMany("Attachment")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.RoleModules", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Identity.Modules", "Module")
                        .WithMany("RoleModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Identity.Role", "Role")
                        .WithMany("RoleModules")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.User", b =>
                {
                    b.HasOne("HCE.Domain.Entities.General.Attachment", "IdentificationAttachment")
                        .WithOne("UserIdentification")
                        .HasForeignKey("HCE.Domain.Entities.Identity.User", "IdentificationAttachmentId");

                    b.HasOne("HCE.Domain.Entities.General.Attachment", "ProfileAttachment")
                        .WithOne("UserProfile")
                        .HasForeignKey("HCE.Domain.Entities.Identity.User", "ProfileAttachmentId");

                    b.Navigation("IdentificationAttachment");

                    b.Navigation("ProfileAttachment");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.UserRole", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.UserToken", b =>
                {
                    b.HasOne("HCE.Domain.Entities.Identity.User", "User")
                        .WithOne("UserToken")
                        .HasForeignKey("HCE.Domain.Entities.Identity.UserToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HCE.Domain.Entities.General.Attachment", b =>
                {
                    b.Navigation("UserIdentification");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.Modules", b =>
                {
                    b.Navigation("Attachment");

                    b.Navigation("RoleModules");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.Role", b =>
                {
                    b.Navigation("RoleModules");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("HCE.Domain.Entities.Identity.User", b =>
                {
                    b.Navigation("UserRoles");

                    b.Navigation("UserToken");
                });
#pragma warning restore 612, 618
        }
    }
}
